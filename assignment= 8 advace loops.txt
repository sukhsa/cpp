//Q 1. Write a program to print the first 10 even numbers.
#include <bits/stdc++.h>
using namespace std;

int main()
{ 
    cout<<"the even number is 1 to 10  is ";
    for(int i=1; i<=10;i+=2)
    cout<<i <<" ";
    return 0;
}
...........................................................................................................................................
//Q.2 Create a program to print the multiplication table of a given number.

#include <bits/stdc++.h>
using namespace std;

int main()
{
    int number;
    cout<<"enter the value of number whose multiplication "<<endl;
    cin>>number;
    for(int i=1;i<=10;i++)
    {
        cout<<number<<"x"<<i<<"="<<number*i<<endl;
    }
    return 0;
}
...........................................................................................................................................
//Q.3 Write a program to calculate the factorial of a given number.

#include <bits/stdc++.h>
using namespace std;

int main()
{
    int number;
    int factorial=1;
    cout<<"enter a number whose calculate factorial\n";
    cin>>number;
    for(int i=1; i<=number;i++)
    {
         factorial *= i;
    }
     cout<<"factorial of a given number is "<<factorial <<endl;
    return 0;
}
...........................................................................................................................................
//Q.4 Create a program to find whether a given number is prime or not.

#include <bits/stdc++.h>
using namespace std;

int main()
{
    int number,flag=1;
    cout<<"enter the value of number\n";
    cin>>number;
    for(int i=2;i<number;i++)
    {
        if(number%i==0)
        {
            flag=0;
            break;
        }
    }
    if(flag==1)
    { 
        cout<<"number is prime\n";
        
    }
    else
    {
        cout<<"number is not prime \n";
    }
       
    return 0;
}
................................................................................................................................................
//Q.5 Write a program to find the sum of digits of a given number.

#include <bits/stdc++.h>
using namespace std;

int main()
{
    int number,lastdigit,sum=0;
    cout<<"enter ther value of number \n";
    cin>>number;
    cout<<"number is "<<number <<endl;
    while(number!=0)
    {
       lastdigit=number%10;
       sum=sum+lastdigit;
      number=number/10;
        
    }
    cout<<"sum of digit is "<<sum <<endl;
       
    return 0;
}
................................................................................................................................................
//Q.6 Create a program to print the Fibonacci series up to a certain limit.

#include <bits/stdc++.h>
using namespace std;

int main()
{
   int a=0,b=1,c,n;
   cout<<"enter the value of  n \n";
   cin>>n;
   cout<<"Fibonacci series upto "<<n <<endl;
   cout<<a <<" " <<b<<" ";
   for(int i=2;i<=n;i++)
   {
       c=a+b;
       cout<<c<<" ";
       a=b;
       b=c;
   }
  
    return 0;
}
................................................................................................................................................
//Q.7 Write a program to find the reverse of a given number.

#include<bits/stdc++.h>
using namespace std;

int digitCount(int num)
{
    int digitcount=0;
     do{
        num/=10;
        digitcount++;
    }while(num!=0);
    return digitcount;
}

void reverse(int num)
{
    int sum=0,lastdigit;
    int original_digits = digitCount(num);
    while(num!=0)
    {
        lastdigit=num%10;
        sum=sum*10+lastdigit;
        num=num/10;
    }
    int ending_digits=digitCount(sum);
    int remaining_digits= original_digits - ending_digits;
    if(remaining_digits!=0)
    {
        for(int i=0;i<remaining_digits;i++)
        {
            cout<<"0";
        }
    }
    cout<<sum;
   
}
int main()
{
    int num,r;
    cout<<"Enter the number you want to get reverse\n";
    cin>>num;
    reverse(num);
}
................................................................................................................................................
//Q.8 Create a program to find the sum of all natural numbers up to a given limit.
#include<bits/stdc++.h>
using namespace std;
int sumOfNaturalNumbers(int limit)
{
    int sum = 0;
    for (int i = 1; i <= limit; i++) 
    {
        sum += i;
    }
    return sum;
}

int main() 
{
    int limit;
    cout << "Enter the limit: ";
    cin >> limit;

    int result = sumOfNaturalNumbers(limit);
    cout << "The sum of all natural numbers up to " << limit << " is: " << result << endl;

    return 0;
}
................................................................................................................................................
//Q.9  Write a program to find the GCD (Greatest Common Divisor) of two given numbers.

#include<bits/stdc++.h>
using namespace std;
int Gcd(int a, int b)
{
    int temp;
    while(b!=0)
    {
        temp = b;
        b=a%b;
        a = temp;
    }
    return a;
}
int main()
{
    int a,b,g;
    cout<<"Enter the value of a and b:\n";
    cin>>a>>b;
    g = Gcd(a,b);
    cout<<"GCD of : "<<a <<" and "<< b<<" is "<<g<<"\n";
}
................................................................................................................................................
//Q.10 Create a program to find the LCM (Least Common Multiple) of two given numbers.
#include<bits/stdc++.h>
using namespace std;
int Gcd(int a, int b)
{
    int temp;
    while(b!=0)
    {
        temp = b;
        b=a%b;
        a = temp;
    }
    return a;
}
int lcm(int a,int b)
{
    return (a*b)/Gcd(a,b);
}
int main()
{
    int a,b,g,l;
    cout<<"Enter the value of a and b:\n";
    cin>>a>>b;
    g = Gcd(a,b);
    cout<<"GCD of : "<<a <<" and "<< b<<" is "<<g<<"\n";
    l=lcm(a,b);
    cout<<"LCM of : "<<a <<" and "<< b<<" is "<<l<<"\n";
}
................................................................................................................................................
//Q.11 Write a program to check whether a given number is Armstrong or not.
#include <bits/stdc++.h>
using namespace std;
int main()
{
    int number, originalNumber, remainder, result = 0, n = 0;

    cout << "Enter an integer: ";
    cin >> number;

    originalNumber = number;

    while (originalNumber != 0)
    {
        originalNumber /= 10;
        n++;
    }

    originalNumber = number;

    
    while (originalNumber != 0)
    {
        remainder = originalNumber % 10;
        result += pow(remainder, n);
        originalNumber /= 10;
    }

    if (result == number)
        cout << number << " is an Armstrong number." << endl;
    else
        cout << number << " is not an Armstrong number." << endl;

    return 0;
}

................................................................................................................................................
//Q.12 Create a program to print all Armstrong numbers between two given numbers.
#include <bits/stdc++.h>
using namespace std;
int main()
{
     int start, end;
    cout << "Enter the starting number: ";
    cin >> start;
    cout << "Enter the ending number: ";
    cin >> end;

    cout << "Armstrong numbers between " << start << " and " << end << " are:" << endl;
    
    for (int num = start; num <= end; ++num) {
        int originalNum, remainder, result = 0, n = 0;

        originalNum = num;
        while (originalNum != 0)
        {
            originalNum /= 10;
            n++;
        }

      
        originalNum = num;
        while (originalNum != 0) 
        {
            remainder = originalNum % 10;
            result += pow(remainder, n);
            originalNum /= 10;
        }

        if (result == num)
            cout << num << endl;
    }

    return 0;
}
................................................................................................................................................
//Q.13 Write a program to check whether a given number is a palindrome or not.
#include <bits/stdc++.h>
using namespace std;
int main()
{
     int number, originalNumber, reversedNumber = 0, remainder;

    cout << "Enter a number: ";
    cin >> number;

    originalNumber = number;

    while (originalNumber != 0) {
        remainder = originalNumber % 10;
        reversedNumber = reversedNumber * 10 + remainder;
        originalNumber /= 10;
    }

   
    if (number == reversedNumber)
        cout << number << " is a palindrome." << endl;
    else
        cout << number << " is not a palindrome." << endl;

    return 0;
}
...............................................................................................................................................
//Q.14 Create a program to print all palindrome numbers between two given numbers.
#include <bits/stdc++.h>
using namespace std;
int main()
{
    int start, end;
    cout << "Enter the starting number: ";
    cin >> start;
    cout << "Enter the ending number: ";
    cin >> end;

    cout << "Palindrome numbers between " << start << " and " << end << " are:" << endl;

    for (int num = start; num <= end; ++num)
    {
        int originalNum = num;
        int reversedNum = 0;
        int remainder;

        while (originalNum != 0) {
            remainder = originalNum % 10;
            reversedNum = reversedNum * 10 + remainder;
            originalNum /= 10;
        }

       
        if (num == reversedNum)
            cout << num << endl;
    }

    return 0;
}
................................................................................................................................................
//Q.15 Write a program to count the number of digits in a given number.
#include <bits/stdc++.h>
using namespace std;
int main()
{
     int number, count = 0;

    cout << "Enter a number: ";
    cin >> number;
    while (number != 0) {
        number /= 10;
        count++;
    }

    cout << "Number of digits: " << count << endl;

    return 0;
}
................................................................................................................................................
 int start, end;
    cout << "Enter the starting number: ";
    cin >> start;
    cout << "Enter the ending number: ";
    cin >> end;

    int sum = 0;
    cout << "Prime numbers between " << start << " and " << end << " are:" << endl;

    for (int num = start; num <= end; ++num)
    {
        bool isPrime = true;

        if (num <= 1)
            isPrime = false;
        else {
            for (int i = 2; i * i <= num; ++i)
            {
                if (num % i == 0) {
                    isPrime = false;
                    break;
                }
            }
        }

        if (isPrime) 
        {
            cout << num << endl;
            sum += num;
        }
    }

    cout << "Sum of prime numbers between " << start << " and " << end << " is: " << sum << endl;

    return 0;
}
................................................................................................................................................
//Q.17 Write a program to find the reverse of a given string.
#include <bits/stdc++.h>
using namespace std;
int main()
{
    string input, reversed;
    
    cout << "Enter a string: ";
    getline(cin, input);

    int length = input.length();
    for (int i = length - 1; i >= 0; --i) 
    {
        reversed += input[i];
    }

    cout << "Reverse of the string: " << reversed << endl;

    return 0;
}
................................................................................................................................................
//Q.18 Create a program to print all prime numbers up to a given limit.
#include <bits/stdc++.h>
using namespace std;
int main()
{
  int limit;
    cout << "Enter the limit: ";
    cin >> limit;

    cout << "Prime numbers up to " << limit << " are:" << endl;

    for (int num = 2; num <= limit; num++) 
    {
        bool isPrime = true;

    
        if (num <= 1)
            isPrime = false;
        else {
            for (int i = 2; i * i <= num; i++)
            {
                if (num % i == 0) {
                    isPrime = false;
                    break;
                }
            }
        }

        
        if (isPrime) 
        {
            cout << num << endl;
        }
    }

    return 0;
}
................................................................................................................................................
//Q.19  Write a program to find the factorial of each digit of a given number and add them.
#include <bits/stdc++.h>
using namespace std;
int main()
{
    int number, originalNumber, remainder, digitFactorialSum = 0;

    cout << "Enter a number: ";
    cin >> number;

    originalNumber = number;

    while (originalNumber != 0) 
    {
       
        remainder = originalNumber % 10;

        int fact = 1;
        for (int i = 1; i <= remainder; ++i) {
            fact *= i;
        }

        
        digitFactorialSum += fact;

        
        originalNumber /= 10;
    }

    cout << "Sum of factorials of digits of " << number << " is: " << digitFactorialSum << endl;

    return 0;
}
................................................................................................................................................
//Q.20 Create a program to print the Pascal's triangle up to a certain number of rows.
#include <bits/stdc++.h>
using namespace std;
int main()
{
     int numRows;

    cout << "Enter the number of rows for Pascal's triangle: ";
    cin >> numRows;

  
    for (int i = 0; i < numRows; ++i) {
        int val = 1;

        
        for (int space = 1; space <= numRows - i; ++space)
        {
            cout << " ";
        }

        for (int j = 0; j <= i; ++j) {
            cout << val << " ";
            val = val * (i - j) / (j + 1);
        }

        cout << endl;
    }

    return 0;
}
................................................................................................................................................
//Q.21 Write a program to print the first N terms of the series: 1, 4, 9, 16, 25, ...
#include <bits/stdc++.h>
using namespace std;
void printSquareSeries(int N)
{
    for (int i = 1; i <= N; i++)
    {
        cout << i*i << " ";
    }
}

int main() {
    int N;
    cout << "Enter the number of terms: ";
    cin >> N;
    cout << "The first " << N << " terms of the series are: ";
    printSquareSeries(N);
    return 0;
}
................................................................................................................................................
//Q.22 Create a program to find the sum of squares of all even numbers between two given numbers.
#include <bits/stdc++.h>
using namespace std;
int sumOfSquareEven(int start, int end) 
{
    int sum = 0;
   
    if (start % 2 != 0)
        start++;
    for (int i = start; i <= end; i += 2) {
        sum += i * i;
    }
    return sum;
}

int main() {
    int start, end;
    cout << "Enter the start and end numbers: ";
    cin >> start >> end;

    int result = sumOfSquareEven(start, end);
    cout << "Sum of squares of even numbers between " << start << " and " << end << " is: " << result << endl;

    return 0;
}
................................................................................................................................................
//Q.23 Write a program to find the factorial of a given number.
#include <bits/stdc++.h>
using namespace std;
 int number;
    long long factorial = 1; 

    cout << "Enter a number: ";
    cin >> number;

    
    if (number < 0) {
        cout << "Factorial is not defined for negative numbers.";
    } else {
        
        for (int i = 1; i <= number; ++i) {
            factorial *= i;
        }
        cout << "Factorial of " << number << " is " << factorial;
    }

    return 0;
}
................................................................................................................................................
//Q.24 create a program to generate a pattern like a right-angled triangle using '*' character.
#include <bits/stdc++.h>
using namespace std;
int main() {
    int rows;
    cout << "Enter the number of rows for the triangle: ";
    cin >> rows;

    for (int i = 1; i <= rows; ++i) {
      
        for (int j = 1; j <= i; ++j) {
            cout << "* ";
        }

        cout << endl;
    }

    return 0;
}
................................................................................................................................................
//Q.25 Write a program to calculate the sum of the series: 1 + 1/2 + 1/3 + 1/4 + ... + 1/N.
#include <bits/stdc++.h>
using namespace std;
double calculateSeriesSum(int N) {
    double sum = 0.0;
    for (int i = 1; i <= N; i++) {
        sum += 1.0 / i;
    }
    return sum;
}

int main() {
    int N;
    cout << "Enter the value of N: ";
    cin >> N;

    if (N <= 0) {
        cout << "N should be a positive integer.";
    } else {
        double sum = calculateSeriesSum(N);
        cout << "Sum of the series up to 1/" << N << " is: " << sum;
    }

    return 0;
}
................................................................................................................................................
//Q.26 Create a program to find the sum of the digits of a number until it becomes a single-digit number.
#include <bits/stdc++.h>
using namespace std;
int sumOfDigits(int num)
{
    int sum = 0;
  
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int main() {
    int number;
    cout << "Enter a number: ";
    cin >> number;

    int sum = number;
  
    while (sum >= 10) {
        sum = sumOfDigits(sum);
    }

    cout << "Sum of digits until it becomes a single-digit number: " << sum;

    return 0;
}
................................................................................................................................................
//Q.27 Write a program to check whether a given number is a perfect number or not.
#include <bits/stdc++.h>
using namespace std;
bool isPerfect(int num) 
{
    int sum = 0;
  
    for (int i = 1; i <= num / 2; i++)
    {
        if (num % i == 0) {
            sum += i;
        }
    }
    
    return sum == num;
}

int main() {
    int number;
    cout << "Enter a number: ";
    cin >> number;

   
    if (isPerfect(number)) 
    {
        cout << number << " is a perfect number.";
    } else {
        cout << number << " is not a perfect number.";
    }

    return 0;
}
................................................................................................................................................
//Q.28 Create a program to find the area of a circle given its radius.
#include <bits/stdc++.h>
using namespace std;
double calculateCircleArea(double radius) {
    const double pi = 3.14159265358979323846;
    return pi * radius * radius;
}

int main() {
    double radius;
    cout << "Enter the radius of the circle: ";
    cin >> radius;

   
    if (radius < 0) {
        cout << "Radius cannot be negative.";
    } else {
        double area = calculateCircleArea(radius);
        cout << "Area of the circle with radius " << radius << " is: " << area;
    }

    return 0;
}
................................................................................................................................................
//Q.29 Write a program to check whether a given year is a leap year or not.
#include <bits/stdc++.h>
using namespace std;
bool isLeapYear(int year) {
   
    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
}

int main() {
    int year;
    cout << "Enter a year: ";
    cin >> year;

    if (isLeapYear(year)) {
        cout << year << " is a leap year.";
    } else {
        cout << year << " is not a leap year.";
    }

    return 0;
}
................................................................................................................................................
//Q.30 Create a program to find the roots of a quadratic equation.
#include <bits/stdc++.h>
using namespace std;
void findRoots(double a, double b, double c) {
    double discriminant = b * b - 4 * a * c;
    double root1, root2;

    if (discriminant > 0) {
        root1 = (-b + sqrt(discriminant)) / (2 * a);
        root2 = (-b - sqrt(discriminant)) / (2 * a);
        cout << "Roots are real and different." << endl;
        cout << "Root 1 = " << root1 << endl;
        cout << "Root 2 = " << root2 << endl;
    } else if (discriminant == 0) {
        root1 = root2 = -b / (2 * a);
        cout << "Roots are real and same." << endl;
        cout << "Root 1 = Root 2 = " << root1 << endl;
    } else {
        double realPart = -b / (2 * a);
        double imaginaryPart = sqrt(abs(discriminant)) / (2 * a);
        cout << "Roots are complex and different." << endl;
        cout << "Root 1 = " << realPart << " + " << imaginaryPart << "i" << endl;
        cout << "Root 2 = " << realPart << " - " << imaginaryPart << "i" << endl;
    }
}

int main() {
    double a, b, c;
    cout << "Enter the coefficients of the quadratic equation (a, b, c): ";
    cin >> a >> b >> c;

  
    findRoots(a, b, c);

    return 0;
}
................................................................................................................................................
//Q.32 Create a program to calculate the power of a given number.
#include <bits/stdc++.h>
using namespace std;
double calculatePower(double base, int exponent) 
{
    double result = 1.0;
    
    for (int i = 0; i < abs(exponent); i++) 
    {
        result *= base;
    }
    
    if (exponent < 0) {
        result = 1.0 / result;
    }
    return result;
}

int main() 
{
    double base;
    int exponent;

    cout << "Enter the base number: ";
    cin >> base;
    cout << "Enter the exponent: ";
    cin >> exponent;

    double result = calculatePower(base, exponent);
    cout << "Result: " << result;

    return 0;
}
................................................................................................................................................
//Q.34 Create a program to find the sum of the series: 1 + x^2/2! + x^3/3! + ... + x^n/n!.
#include <bits/stdc++.h>
using namespace std;
long long factorial(int n) {
    if (n == 0)
        return 1;
    long long fact = 1;
    for (int i = 1; i <= n; ++i) {
        fact *= i;
    }
    return fact;
}

double calculateSeriesSum(double x, int n) 
{
    double sum = 1.0; 
    for (int i = 2; i <= n; ++i)
    {
        sum += pow(x, i) / factorial(i);
    }
    return sum;
}

int main() {
    double x;
    int n;

    cout << "Enter the value of x: ";
    cin >> x;
    cout << "Enter the value of n: ";
    cin >> n;

    double sum = calculateSeriesSum(x, n);
    cout << "Sum of the series up to n terms: " << sum;

    return 0;
}
................................................................................................................................................
//Q.35 Write a program to find the sum of the series: 1/1! - 2/2! + 3/3! - 4/4! + ... + N/N!.
#include <bits/stdc++.h>
using namespace std;
long long factorial(int n) {
    if (n == 0)
        return 1;
    long long fact = 1;
    for (int i = 1; i <= n; ++i) {
        fact *= i;
    }
    return fact;
}


double calculateSeriesSum(int N) {
    double sum = 0.0;
    int sign = 1; 
    for (int i = 1; i <= N; ++i) {
        sum += sign * (double)i / factorial(i);
        sign *= -1; 
    }
    return sum;
}

int main() {
    int N;

    cout << "Enter the value of N: ";
    cin >> N;

    double sum = calculateSeriesSum(N);
    cout << "Sum of the series up to N terms: " << sum;

    return 0;
}
................................................................................................................................................
//Q.37 Write a program to check whether a given number is a happy number or not.
#include <bits/stdc++.h>
using namespace std;
int sumOfSquares(int n) {
    int sum = 0;
    while (n > 0) {
        int digit = n % 10;
        sum += digit * digit;
        n /= 10;
    }
    return sum;
}


bool isHappy(int n) {
    unordered_set<int> seen;
    while (n != 1 && seen.find(n) == seen.end()) {
        seen.insert(n);
        n = sumOfSquares(n);
    }
    return n == 1;
}

int main() {
    int number;
    cout << "Enter a number: ";
    cin >> number;

    if (isHappy(number)) {
        cout << number << " is a happy number.";
    } else {
        cout << number << " is not a happy number.";
    }

    return 0;
}
................................................................................................................................................
//Q.38 Create a program to find the sum of the squares of the digits of a number until it becomes a single-digit number.
#include <bits/stdc++.h>
using namespace std;
int sumOfSquaresOfDigits(int n) 
{
    int sum = 0;
    while (n > 0) {
        int digit = n % 10;
        sum += digit * digit;
        n /= 10;
    }
    return sum;
}

int singleDigitSum(int n)
{
    while (n >= 10) {
        n = sumOfSquaresOfDigits(n);
    }
    return n;
}

int main() {
    int number;
    cout << "Enter a number: ";
    cin >> number;

    int result = singleDigitSum(number);
    cout << "Single-digit sum: " << result;

    return 0;
}
................................................................................................................................................
//Q.39 Write a program to find the factorial of each digit of a given number and add them until it becomes a single-digit number.
#include <bits/stdc++.h>
using namespace std;
long long factorial(int n) 
{
    if (n == 0 || n == 1)
        return 1;
    long long fact = 1;
    for (int i = 2; i <= n; i++)
    {
        fact *= i;
    }
    return fact;
}

int findSingleDigitSum(int n) 
{
    int sum = 0;
    while (n >= 10) {
        int digit = n % 10;
        sum += factorial(digit);
        n /= 10;
    }
    
    sum += factorial(n);
    
    if (sum >= 10)
        return findSingleDigitSum(sum);
    return sum;
}

int main() 
{
    int number;
    cout << "Enter a number: ";
    cin >> number;

    int singleDigitSum = findSingleDigitSum(number);

    cout << "The sum of factorials of digits until it becomes a single-digit number: " << singleDigitSum;

    return 0;
}
................................................................................................................................................
//Q.40 Create a program to calculate the area of a triangle given its three sides using Heron's formula.
#include <bits/stdc++.h>
using namespace std;
double calculateTriangleArea(double a, double b, double c)
{
    double s = (a + b + c) / 2;
    return sqrt(s * (s - a) * (s - b) * (s - c));
}

int main() {
    double side1, side2, side3;

    cout << "Enter the lengths of the three sides of the triangle: ";
    cin >> side1 >> side2 >> side3;

   
    double area = calculateTriangleArea(side1, side2, side3);

   
    cout << "Area of the triangle: " << area << endl;

    return 0;
}


